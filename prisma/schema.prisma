datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String 
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique 
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  
  // Nested Quiz model
  quiz Quiz? // One-to-one relation with Quiz

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String 
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// New Quiz model
model Quiz {
  id String @id @default(uuid())
  title String @default("Quiz Title") // Default title can be set to chapter title
  description String? @db.Text
  questions Question[] // A quiz can have multiple questions

  chapterId String @unique // Each quiz is associated with one chapter
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// New Question model
model Question {
  id String @id @default(uuid())
  quizId String // Reference to the quiz
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  questionText String @db.Text
  options Option[] // A question can have multiple options
  correctOption String // Index of the correct option

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// New Option model
model Option {
  id String @id @default(uuid())
  questionId String // Reference to the question
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  optionText String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
